//
//  ChatOptions.swift
//  LLMChatOpenAI
//
//  Created by Kevin Hermawan on 9/14/24.
//

import Foundation
import JSONSchema

/// A struct that represents the options of a chat completion request.
public struct ChatOptions: Encodable, Sendable {
    /// Number between -2.0 and 2.0.
    /// Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    public let frequencyPenalty: Double?
    
    /// Modify the likelihood of specified tokens appearing in the completion.
    /// Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100.
    /// Mathematically, the bias is added to the logits generated by the model prior to sampling.
    /// The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    public let logitBias: [String: Int]?
    
    /// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
    public let logprobs: Bool?
    
    /// An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to true if this parameter is used.
    public let topLogprobs: Int?
    
    /// An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.
    public let maxCompletionTokens: Int?
    
    /// How many chat completion choices to generate for each input message.
    /// Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as 1 to minimize costs.
    public let n: Int?
    
    /// Number between -2.0 and 2.0.
    /// Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    public let presencePenalty: Double?
    
    /// An object specifying the format that the model must output.
    /// Compatible with GPT-4o, GPT-4o mini, GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106.
    public let responseFormat: ResponseFormat?
    
    /// This feature is in Beta.
    /// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
    /// Determinism is not guaranteed, and you should refer to the `systemFingerprint` response parameter to monitor changes in the backend.
    public let seed: Int?
    
    /// Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
    /// - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
    /// - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
    /// - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
    /// - When not set, the default behavior is 'auto'.
    /// When this parameter is set, the response body will include the `serviceTier` utilized.
    public let serviceTier: String?
    
    /// Up to 4 sequences where the API will stop generating further tokens.
    public let stop: [String]?
    
    /// What sampling temperature to use, between 0 and 2.
    /// Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    /// We generally recommend altering this or `topP` but not both.
    public let temperature: Double?
    
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with `topP` probability mass.
    /// So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    /// We generally recommend altering this or temperature but not both.
    public let topP: Double?
    
    /// An array of ``Tool`` the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
    public let tools: [Tool]?
    
    /// Controls which (if any) tool is called by the model.
    /// `none` is the default when no `tools` are present. `auto` is the default if `tools` are present.
    public let toolChoice: ToolChoice?
    
    /// Whether to enable parallel function calling during tool use.
    public let parallelToolCalls: Bool?
    
    /// A unique identifier representing your end-user.
    public let user: String?
    
    public init(
        frequencyPenalty: Double? = nil,
        logitBias: [String: Int]? = nil,
        logprobs: Bool? = nil,
        topLogprobs: Int? = nil,
        maxCompletionTokens: Int? = nil,
        n: Int? = nil,
        presencePenalty: Double? = nil,
        responseFormat: ResponseFormat? = nil,
        seed: Int? = nil,
        serviceTier: String? = nil,
        stop: [String]? = nil,
        temperature: Double? = nil,
        topP: Double? = nil,
        tools: [Tool]? = nil,
        toolChoice: ToolChoice? = nil,
        parallelToolCalls: Bool? = nil,
        user: String? = nil
    ) {
        self.frequencyPenalty = frequencyPenalty
        self.logitBias = logitBias
        self.logprobs = logprobs
        self.topLogprobs = topLogprobs
        self.maxCompletionTokens = maxCompletionTokens
        self.n = n
        self.presencePenalty = presencePenalty
        self.responseFormat = responseFormat
        self.seed = seed
        self.serviceTier = serviceTier
        self.stop = stop
        self.temperature = temperature
        self.topP = topP
        self.tools = tools
        self.toolChoice = toolChoice
        self.parallelToolCalls = parallelToolCalls
        self.user = user
    }
    
    public struct ResponseFormat: Encodable, Sendable {
        /// The type of response format being defined.
        public let type: ResponseType
        
        /// The JSON schema object. Only applicable when type is `jsonSchema`.
        public let jsonSchema: Schema?
        
        /// Initializes a new instance of ``ResponseFormat``.
        public init(type: ResponseType, jsonSchema: Schema? = nil) {
            self.type = type
            self.jsonSchema = jsonSchema
        }
        
        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(type, forKey: .type)
            
            if case .jsonSchema = type {
                try container.encode(jsonSchema, forKey: .jsonSchema)
            }
        }
        
        private enum CodingKeys: String, CodingKey {
            case type
            case jsonSchema = "json_schema"
        }
        
        public enum ResponseType: String, Codable, Sendable, CaseIterable {
            case text
            case jsonObject = "json_object"
            case jsonSchema = "json_schema"
        }
        
        public struct Schema: Encodable, Sendable {
            /// The name of the response format.
            /// Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            public let name: String
            
            /// A description of what the response format is for, used by the model to determine how to respond in the format.
            public let description: String?
            
            /// The schema for the response format, described as `JSONSchema`.
            public let schema: JSONSchema?
            
            /// Whether to enable strict schema adherence when generating the output.
            /// If set to true, the model will always follow the exact schema defined in the schema field.
            /// Only a subset of JSON Schema is supported when `strict` is true.
            public let strict: Bool?
            
            /// Initializes a new instance of ``Schema``.
            public init(name: String, description: String? = nil, schema: JSONSchema? = nil, strict: Bool? = nil) {
                self.name = name
                self.description = description
                self.schema = schema
                self.strict = strict
            }
            
            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encode(name, forKey: .name)
                try container.encodeIfPresent(description, forKey: .description)
                try container.encodeIfPresent(schema, forKey: .schema)
                try container.encodeIfPresent(strict, forKey: .strict)
            }
            
            private enum CodingKeys: String, CodingKey {
                case description, name, schema, strict
            }
        }
    }
    
    public struct Tool: Encodable {
        /// The type of the tool. Currently, only function is supported.
        public let type: String
        
        public let function: Function
        
        /// Initializes a new instance of ``Tool``.
        public init(type: String, function: Function) {
            self.type = type
            self.function = function
        }
        
        public struct Function: Encodable {
            /// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            public let name: String
            
            /// A description of what the function does, used by the model to choose when and how to call the function.
            public let description: String?
            
            /// The parameters the functions accepts, described as `JSONSchema`.
            ///
            /// Omitting `parameters` defines a function with an empty parameter list.
            public let parameters: JSONSchema?
            
            /// Whether to enable strict schema adherence when generating the function call.
            /// If set to true, the model will follow the exact schema defined in the parameters field.
            /// Only a subset of JSON Schema is supported when `strict` is true.
            public let strict: Bool?
            
            /// Initializes a new instance of ``Function``.
            public init(name: String, description: String? = nil, parameters: JSONSchema? = nil, strict: Bool? = nil) {
                self.name = name
                self.description = description
                self.parameters = parameters
                self.strict = strict
            }
            
            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encode(name, forKey: .name)
                try container.encodeIfPresent(description, forKey: .description)
                try container.encodeIfPresent(parameters, forKey: .parameters)
                try container.encodeIfPresent(strict, forKey: .strict)
            }
            
            private enum CodingKeys: String, CodingKey {
                case name, description, parameters, strict
            }
        }
    }
    
    public enum ToolChoice: Encodable {
        case none
        case auto
        case function(name: String)
        
        public func encode(to encoder: Encoder) throws {
            switch self {
            case .none:
                var container = encoder.singleValueContainer()
                try container.encode("none")
            case .auto:
                var container = encoder.singleValueContainer()
                try container.encode("auto")
            case .function(let name):
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encode("function", forKey: .type)
                
                var functionContainer = container.nestedContainer(keyedBy: FunctionCodingKeys.self, forKey: .function)
                try functionContainer.encode(name, forKey: .name)
            }
        }
        
        private enum CodingKeys: String, CodingKey {
            case type
            case function
        }
        
        private enum FunctionCodingKeys: String, CodingKey {
            case name
        }
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encodeIfPresent(frequencyPenalty, forKey: .frequencyPenalty)
        try container.encodeIfPresent(logitBias, forKey: .logitBias)
        try container.encodeIfPresent(logprobs, forKey: .logprobs)
        try container.encodeIfPresent(topLogprobs, forKey: .topLogprobs)
        try container.encodeIfPresent(maxCompletionTokens, forKey: .maxCompletionTokens)
        try container.encodeIfPresent(n, forKey: .n)
        try container.encodeIfPresent(presencePenalty, forKey: .presencePenalty)
        try container.encodeIfPresent(responseFormat, forKey: .responseFormat)
        try container.encodeIfPresent(seed, forKey: .seed)
        try container.encodeIfPresent(serviceTier, forKey: .serviceTier)
        try container.encodeIfPresent(stop, forKey: .stop)
        try container.encodeIfPresent(temperature, forKey: .temperature)
        try container.encodeIfPresent(topP, forKey: .topP)
        try container.encodeIfPresent(tools, forKey: .tools)
        try container.encodeIfPresent(toolChoice, forKey: .toolChoice)
        try container.encodeIfPresent(parallelToolCalls, forKey: .parallelToolCalls)
        try container.encodeIfPresent(user, forKey: .user)
    }
    
    private enum CodingKeys: String, CodingKey {
        case frequencyPenalty = "frequency_penalty"
        case logitBias = "logit_bias"
        case logprobs
        case topLogprobs = "top_logprobs"
        case maxCompletionTokens = "max_completion_tokens"
        case n
        case presencePenalty = "presence_penalty"
        case responseFormat = "response_format"
        case seed
        case serviceTier = "service_tier"
        case stop
        case temperature
        case topP = "top_p"
        case tools
        case toolChoice = "tool_choice"
        case parallelToolCalls = "parallel_tool_calls"
        case user
    }
}
